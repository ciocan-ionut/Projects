     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14 00000000 08                          a DB 8
    15 00000001 02                          b DB 2
    16 00000002 0100                        c DW 1
    17 00000004 0C000000                    e DD 12
    18 00000008 0800000000000000            x DQ 8
    19                                  ; our code starts here
    20                                  segment code use32 class=code
    21                                      start:
    22                                          ; F.S. p2 ex 7
    23 00000000 A0[00000000]                    mov AL, [a]
    24 00000005 2C02                            sub AL, 2
    25 00000007 6698                            CBW
    26 00000009 98                              CWDE
    27 0000000A 99                              CDQ
    28 0000000B 89C3                            mov EBX, EAX
    29 0000000D 89D1                            mov ECX, EDX
    30 0000000F 66A1[01000000]                  mov AX, [b]
    31 00000015 98                              CWDE
    32 00000016 0305[02000000]                  add EAX, [c]
    33 0000001C 50                              push EAX
    34 0000001D 89D8                            mov EAX, EBX
    35 0000001F 89CA                            mov EDX, ECX
    36 00000021 5B                              pop EBX
    37 00000022 F7FB                            idiv EBX
    38                                          ; (a - 2) / (b + c) + a * c + e - x = 12
    39                                          ; exit(0)
    40 00000024 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    41 00000026 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
