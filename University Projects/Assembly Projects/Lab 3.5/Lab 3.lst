     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14 00000000 08                          a DB 8
    15 00000001 01                          b DB 1
    16 00000002 0200                        c DW 2
    17 00000004 0C000000                    e DD 12
    18 00000008 0800000000000000            x DQ 8
    19                                  ; our code starts here
    20                                  segment code use32 class=code
    21                                      start:
    22                                          ; F.S. p2 ex 7
    23 00000000 66B80000                        mov AX, 0
    24 00000004 66BA0000                        mov DX, 0
    25 00000008 A0[00000000]                    mov AL, [a]
    26 0000000D 2C02                            sub AL, 2
    27 0000000F 66BB0000                        mov BX, 0
    28 00000013 8A1D[01000000]                  mov BL, [b]
    29 00000019 66031D[02000000]                add BX, [c]
    30 00000020 66F7F3                          div BX
    31 00000023 BB00000000                      mov EBX, 0
    32 00000028 6689C3                          mov BX, AX
    33 0000002B 66B80000                        mov AX, 0
    34 0000002F A0[00000000]                    mov AL, [a]
    35 00000034 668B0D[02000000]                mov CX, [c]
    36 0000003B 66F7E1                          mul CX
    37 0000003E 6652                            push DX
    38 00000040 6650                            push AX
    39 00000042 58                              pop EAX
    40 00000043 01D8                            add EAX, EBX
    41 00000045 0305[04000000]                  add EAX, [e]
    42 0000004B BA00000000                      mov EDX, 0
    43 00000050 8B1D[08000000]                  mov EBX, [x]
    44 00000056 8B0D[0C000000]                  mov ECX, [x+4]
    45 0000005C 19D8                            sbb EAX, EBX
    46 0000005E 19CA                            sbb EDX, ECX
    47                                          ; (a - 2) / (b + c) + a * c + e - x = 12
    48                                          ; exit(0)
    49 00000060 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    50 00000062 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
