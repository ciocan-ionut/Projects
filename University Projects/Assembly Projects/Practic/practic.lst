     1                                  bits 32
     2                                  global start        
     3                                  
     4                                  ; declare external functions needed by our program
     5                                  extern exit, scanf, fopen, fprintf, fclose
     6                                  import exit msvcrt.dll
     7                                  import scanf msvcrt.dll
     8                                  import fopen msvcrt.dll
     9                                  import fprintf msvcrt.dll
    10                                  import fclose msvcrt.dll
    11                                  
    12                                  ; our data is declared here (the variables needed by our program)
    13                                  segment data use32 class=data
    14                                      ; ...
    15 00000000 00000000                    n dd 0
    16 00000004 00000000                    numar dd 0
    17 00000008 256400                      format db "%d", 0
    18 0000000B 6E756D657265322E74-         nume_fisier db "numere2.txt", 0
    18 00000014 787400             
    19 00000017 00000000                    descriptor dd 0
    20 0000001B 7700                        mod_acces db "w", 0
    21                                  ; our code starts here
    22                                  segment code use32 class=code
    23                                      start:
    24                                          ; ...
    25 00000000 68[1B000000]                    push dword mod_acces
    26 00000005 68[0B000000]                    push dword nume_fisier
    27 0000000A FF15[00000000]                  call [fopen]
    28 00000010 83C408                          add esp, 8
    29                                          
    30 00000013 83F800                          cmp eax, 0
    31 00000016 746D                            je final
    32 00000018 A3[17000000]                    mov [descriptor], eax
    33                                          
    34 0000001D 68[00000000]                    push dword n
    35 00000022 68[08000000]                    push dword format
    36 00000027 FF15[00000000]                  call [scanf]
    37 0000002D 83C408                          add esp, 8
    38                                          
    39                                          citeste:
    40 00000030 68[04000000]                    push dword numar
    41 00000035 68[08000000]                    push dword format
    42 0000003A FF15[00000000]                  call [scanf]
    43 00000040 83C408                          add esp, 8
    44                                          
    45                                          
    46 00000043 A1[04000000]                    mov eax, [numar]
    47 00000048 83F824                          cmp eax, '$'
    48 0000004B 7438                            je final
    49                                          
    50 0000004D 83F800                          cmp eax, 0
    51 00000050 7D31                            jge urmatorul
    52                                          
    53 00000052 F7D8                            neg eax
    54 00000054 31D2                            xor edx, edx
    55 00000056 B90A000000                      mov ecx, 10
    56 0000005B F7F1                            div ecx
    57 0000005D 31D2                            xor edx, edx
    58 0000005F F7F1                            div ecx
    59 00000061 3A15[00000000]                  cmp dl, [n]
    60 00000067 751A                            jne urmatorul
    61                                          
    62 00000069 FF35[04000000]                  push dword [numar]
    63 0000006F 68[08000000]                    push dword format
    64 00000074 FF35[17000000]                  push dword [descriptor]
    65 0000007A FF15[00000000]                  call [fprintf]
    66 00000080 83C40C                          add esp, 12
    67                                          
    68                                          urmatorul:
    69 00000083 EBAB                            jmp citeste
    70                                          
    71                                          final:
    72 00000085 FF35[17000000]                  push dword [descriptor]
    73 0000008B FF15[00000000]                  call [fclose]
    74 00000091 83C404                          add esp, 4
    75                                          ; exit(0)
    76 00000094 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    77 00000096 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
